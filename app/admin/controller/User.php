<?php

namespace app\admin\controller;


use app\common\model\AdminModel;
use app\common\model\UserModel;
use app\common\model\UserModel as models;
use app\common\model\VideoUserLevel;
use app\common\model\VideoVipLevel;
use app\common\traites\PublicCrudTrait;
use app\validate\User as validates;
use think\exception\ValidateException;
use think\facade\Db;

class User extends Base
{
    protected $model;
    use PublicCrudTrait;

    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //获取列表信息
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = $date = [];
        isset($post['user_name']) && $map [] = ['a.user_name', 'like', '%' . $post['user_name'] . '%'];
        isset($post['phone']) && $map[] = ['a.phone', '=', $post['phone']];
        isset($post['id']) && $map[] = ['a.id', '=', $post['id']];

        if (isset($post['start']) && isset($post['end'])) {
            $date['start'] = $post['start'];
            $date['end'] = $post['end'];
        }

        $list = $this->model->page_list($map, $limit, $page, $date);
        return $this->success($list);
    }

    //代理商个人信息
    public function agent()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        $list= $this->model->page_one($limit,$page);
        return $this->success($list);
    }
    public function add()
    {
        //过滤数据
        $postField = 'phone,user_name,pwd,nickname,type,invitation_code,presenter_day';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //$post = array_filter($post);

        //$post = $this->is_admin($post);
        //if (!$post) $post['market_uid'] =0;//return $this->failed('业务员ID错误或不存在');
        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //查询是否重复的用户名
        $find = $this->model->where('user_name', $post['user_name'])->find();
        if ($find) return $this->failed('用户已存在');

        //加密密码
        $post['pwd'] = !empty($post['pwd']) && isset($post['pwd']) ? pwdEncryption($post['pwd']) :home_Initial_pwd();
        //邀请码不存在时邀请码
        if (!isset($post['invitation_code']) || empty($post['invitation_code']))  $post['invitation_code'] = generateCode();
        if (!isset($post['agent_rate']) || empty($post['agent_rate'])) $post['agent_rate']=0;
        if ($post['agent_rate'] >100) return  $this->failed('分销比例不能大于100');
        // 默认会员类型
        $post['type'] = 2;

        //判断是否是代理商添加。是就给该用户加上 代理id
        if (session('admin_user.agent')){
            $post['agent_id_1']=session('admin_user.id');
            $post['agent_id_2']=session('admin_user.agent_id_1');
            $post['agent_id_3']=session('admin_user.agent_id_2');
            $post['market_uid']=session('admin_user.market_uid');
            //查询当前服务商添加的 服务商的 分销比例是否小于 100%
            $agent_rate =$this->model->where(['agent_id_1|agent_id_2|agent_id_3|id' => session('admin_user.id')])->sum('agent_rate');

            if ((intval($agent_rate)+intval($post['agent_rate'])) >100)  return  $this->failed('分销比例'.($agent_rate+$post['agent_rate']).'%不能超过100%');
            if (session('admin_user.agent_rate') <= $post['agent_rate'])  return  $this->failed('分销比例不能大于自己');
        }
        $presenterDay = $post['presenter_day'] ?? 0;
        unset($post['presenter_day']);
        //执行修改数据
        $save = $this->model->save($post);
        if ($save) {
            $userId = $this->model->id;
            //赠送会员
            if ($presenterDay) {
                // 获取会员类型
                $vipLevel = (new VideoVipLevel())->where('status', 1)->where('type', 3)->value('id');
                $videoUserLevel = [
                    'uid' => $userId,
                    'status' => 1,
                    'vip_level' => $vipLevel,
                    'vip_start_time' => date('Y-m-d H:i:s'),
                    'vip_end_time' => date('Y-m-d H:i:s', strtotime("+{$presenterDay} day"))
                ];
                (new VideoUserLevel())->save($videoUserLevel);
            }
            return $this->success([]);
        }
        return $this->failed('修改失败');
    }

    /**
     * 修改方法
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'phone,user_name,pwd,nickname,type,invitation_code,id,presenter_day';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //$post = array_filter($post);

        //$post = $this->is_admin($post);
        //if (!$post) $post['market_uid'] =0;
        //if (!$post) return $this->failed('业务员ID错误或不存在');
        //验证数据
        try {
            validate(validates::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //查询是否重复的用户名
        $find = $this->model->where('user_name', $post['user_name'])->where('id', '<>', $post['id'])->find();
        if ($find) return $this->failed('用户已存在');

        //加密密码
        !empty($post['pwd']) && $post['pwd'] = pwdEncryption($post['pwd']);

        if (isset($post['agent_rate'])) {
            if ($post['agent_rate'] >100) return  $this->failed('分销比例不能大于100');

            //邀请码不存在时邀请码
            //if (!isset($post['invitation_code']) || empty($post['invitation_code'])) $post['invitation_code'] = generateCode();
            //查询当前服务商添加的 服务商的 分销比例是否小于 100%
            $agent_rate =$this->model->where('id','<>',$post['id'])->where(['agent_id_1|agent_id_2|agent_id_3|id' => session('admin_user.id')])->sum('agent_rate');
            if ((intval($agent_rate)+intval($post['agent_rate'])) >100)  return  $this->failed('分销比例'.($agent_rate+$post['agent_rate']).'%不能超过100%');
            if (session('admin_user.agent')){
                if (session('admin_user.agent_rate') <= $post['agent_rate']) return  $this->failed('分销比例不能大于自己');
            }
        }

        $presenterDay = $post['presenter_day'] ?? 0;
        unset($post['presenter_day']);
        //赠送会员
        if ($presenterDay) {
            // 获取会员类型
            $vipLevel = (new VideoVipLevel())->where('status', 1)->where('type', 3)->value('id');
            $videoUserLevel = [
                'uid' => $post['id'],
                'status' => 1,
                'vip_level' => $vipLevel,
                'vip_start_time' => date('Y-m-d H:i:s'),
                'vip_end_time' => date('Y-m-d H:i:s', strtotime("+{$presenterDay} day"))
            ];
            (new VideoUserLevel())->save($videoUserLevel);
        }

        //执行修改数据
        $save = $this->model->update($post);
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }


    //判断业务员存不存在
    public function is_admin($post)
    {
        if (!isset($post['market_uid']) || empty($post['market_uid'])) return false;
        $admin = (new AdminModel())->find($post['market_uid']);
        if (!$admin) return false;
        return $post;
    }

    //修改虚拟账号
    public function is_status()
    {
        $id = $this->request->post('id', 0);
        if ($id <= 0) return $this->failed('用户不存在');
        $find = $this->model->find($id);
        $find->is_fictitious = $find->is_fictitious == 1 ? 0 : 1;
        $save = $find->save();
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * money_change_type: 1 1增加
     *uid: 20  用户id
     *change_money:  变化金额
     *money_ststus: 90 90余额修改
     *用户余额修改
     */
    public function money_edit()
    {
        $postField = 'money_change_type,change_money,uid,money_ststus';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $post = array_filter($post);
        //验证数据
        try {
            validate(validates::class)->scene('money')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //查询当前用户的余额
        $find = $this->model->find($post['uid']);
        if (!$find) return $this->failed('用户不存在');

        // '编辑可用余额'; 90
        if ($post['money_ststus'] == 90) {
            return $this->balance_edit($post, $find);
        }

        if ($post['money_ststus'] == 91) {
            return $this->frozen_edit($post, $find);
        }

        if ($post['money_ststus'] == 92) {
            return $this->points_edit($post, $find);
        }

        return $this->failed('请求错误');
    }

    /**
     * 用户余额修改
     * @param $post /数据
     * @param $find /模型查询数据
     * @return mixed
     */
    protected function balance_edit($post, $find)
    {

        $balance = $find->money_balance;
        //查询用户钱是否够扣
        if ($find->money_balance < $post['change_money'] && $post['money_change_type'] != 1) return $this->failed('用户钱包不够');

        //state是 1时是增加
        $find->money_balance = $post['money_change_type'] == 1 ? $find->money_balance + $post['change_money'] : $find->money_balance - $post['change_money'];
        //执行修改数据
        $save = false;
        Db::startTrans();
        try {
            $find->save();
            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 3,
                'status' => 101,
                'money_before' => $balance,
                'money_end' => $find->money_balance,
                'money' => $post['change_money'],
                'uid' => $find->id,
                'market_uid' => session('admin_user.id'),
            ]);
            $save = true;
            Db::commit();
        } catch (ValidateException $e) {
            Db::rollback();
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * @param $post /数据
     * @param $find /模型查询数据
     * @return mixed
     * 用户冻结余额修改
     */
    protected function frozen_edit($post, $find)
    {

        $balance = $find->money_freeze;
        //查询用户冻结金额是否够扣
        if ($find->money_freeze < $post['change_money'] && $post['money_change_type'] != 1) return $this->failed('用户钱包不够');

        //state是 1时是增加
        $find->money_freeze = $post['money_change_type'] == 1 ? $find->money_freeze + $post['change_money'] : $find->money_freeze - $post['change_money'];
        //执行修改数据
        $save = false;
        Db::startTrans();
        try {
            $find->save();
            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 3,
                'status' => 101,
                'money_before' => $balance,
                'money_end' => $find->money_freeze,
                'money' => $post['change_money'],
                'uid' => $find->id,
                'market_uid' => session('admin_user.id'),
            ]);
            $save = true;
            Db::commit();
        } catch (ValidateException $e) {
            Db::rollback();
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     ** @param $post /数据
     * @param $find /模型查询数据
     * 用户积分修改
     */
    public function points_edit($post, $find)
    {
        $balance = $find->points;
        //查询用户冻结金额是否够扣
        if ($find->money_freeze < $post['change_money'] && $post['money_change_type'] != 1) return $this->failed('用户钱包不够');

        //state是 1时是增加
        $find->points = $post['money_change_type'] == 1 ? $find->money_freeze + $post['change_money'] : $find->money_freeze - $post['change_money'];
        //执行修改数据
        $save = false;
        Db::startTrans();
        try {
            $find->save();
            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 3,
                'status' => 301,
                'money_before' => $balance,
                'money_end' => $find->points,
                'money' => $post['change_money'],
                'uid' => $find->id,
                'market_uid' => session('admin_user.id'),
            ]);
            $save = true;
            Db::commit();
        } catch (ValidateException $e) {
            Db::rollback();
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    public function users()
    {
        $keyword = $this->request->post('keyword', '');
        $where = [];
        if ($keyword) {
            $where['user_name'] = ['like', '%' . $keyword . '%'];
        }
        $list = $this->model->where('status', 1)->where($where)->field('id,user_name')->select();
        return $this->success($list);
    }
}