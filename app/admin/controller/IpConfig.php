<?php


namespace app\admin\controller;


use app\common\model\IpConfig as models;
use app\common\traites\PublicCrudTrait;
use think\exception\ValidateException;
use \app\validate\SysIpConfig as validates;

class IpConfig extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     *配置控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = [];
        isset($post['domain']) && $map [] = ['domain', 'like', '%' . $post['domain'] . '%'];
        //->page($page, $limit)
        $list = $this->model->where($map)->order('id desc')->paginate(['list_rows' => $limit, 'page' => $page]);
        return $this->success($list);
    }

    /**
     * 添加
     */
    public function add()
    {
        //过滤数据
        $postField = 'domains,status,type';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
//        dd($post['domains']);
        $domainList = preg_split('/\n/', $post['domains']);
        $hasDomains = $this->model->where('status', 1)->column('domain');
        $saveList = [];
        if ($domainList) {
            foreach ($domainList as $domain) {
                if (! in_array($domain, $hasDomains)) {
                    // 验证域名格式
                    if ($this->is_domain($domain) === false) {
                        continue;
                    }
                    $ip = gethostbyname($domain);
                    $saveList[] = [
                        'domain' => $domain,
                        'type' => $post['type'],
                        'status' => $post['status'],
                        'ip' => $ip,
                    ];
                }
            }
        }
        if (empty($saveList)) {
            return $this->failed('没有需要添加的域名或格式错误');
        }
        $save = $this->model->saveAll($saveList);
        if ($save) {
            return $this->success([]);
        }
        return $this->failed('新增失败');
    }


    /**
     * 修改
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,domain,status,type';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //查询是否重复的
        $find = $this->model->where('domain', $post['domain'])->where('status', 1)->where('id', '<>', $post['id'])->find();
        if ($find) {
            return $this->failed('该域名已存在');
        }
        if ( $this->is_domain($post['domain']) === false) {
            return $this->failed('域名格式错误');
        }
        
        $post['ip'] = gethostbyname($post['domain']);
        $post['update_time'] = time();
        //执行修改数据
        $save = $this->model->update($post);
        if ($save) {
            return $this->success([]);
        }
        return $this->failed('修改失败');
    }

    public function del()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $del = $this->model->where('id', $post['id'])->update(['status' => 0, 'delete_time' => time()]);
        if ($del) {
            return $this->success([]);
        }
        return $this->failed('删除失败');
    }

    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $detail = $this->model->where('id', $post['id'])->find();
        if ($detail) {
            return $this->success($detail);
        }
        return $this->failed('查询失败');        
    }

    private function is_domain($string) {
        // 域名正则表达式
        $pattern = '/^([a-zA-Z0-9-_]+(\.[a-zA-Z0-9-_]+)*\.[a-zA-Z0-9-_]+|\w+\.[a-zA-Z0-9-_]+[\w-]+(\.[\w-]{2,})+)$/';

        // 使用preg_match进行匹配
        return preg_match($pattern, $string) === 1;
    }
}