<?php


namespace app\admin\controller\notice;

use app\admin\controller\Base;
use app\common\model\Notify as models;
use app\common\traites\PublicCrudTrait;
use think\exception\ValidateException;
use \app\validate\Notify as validates;

class Notify extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 通知控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post= array_filter($this->request->post());
        $map=[];
        isset($post['mark']) && $map [] = ['mark', 'like', '%' . $post['mark'] . '%'];
        isset($post['type']) && $map [] = ['type','=',$post['type']];
        $role = session('admin_user.role');
        if ($role == 2) {
            $agentUid = session('admin_user.id');
            return $this->success($this->model->agent_user_list($agentUid, $page, $limit));
        }
        $list = $this->model->page_list($map, $limit, $page);
        return $this->success($list);
    }

    /**
     * 添加
     */
    public function add()
    {
        //过滤数据
        $postField = 'type,status,unique,mark';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $post['status']=isset($post['status']) ? $post['status']:1;//默认正常状态
        $post['unique']=$post['type'] == 1 ? '':$post['unique'];//全体通知时 un未空

        $save = $this->model->save($post);
        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    /**
     * 通知位置
     * @return mixed
     */
    public function notifys()
    {
        $notifys = $this->model->notifys;
        return $this->success([$notifys]);
    }

    /**
     * 修改
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,type,status,unique,mark';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $post['unique']=$post['type'] == 1 ? '':$post['unique'];//全体通知时 un未空
        //执行修改数据
        $save = $this->model->update($post);
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }


}