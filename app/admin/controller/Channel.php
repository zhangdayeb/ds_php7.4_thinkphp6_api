<?php

namespace app\admin\controller;

use app\common\model\Channel as models;
use app\common\traites\PublicCrudTrait;
use app\validate\Channel as validates;
use think\exception\ValidateException;

class Channel extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     *配置控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $data = $this->request->post();
        $page = $data['page'] ?? 1;
        $limit = $data['limit'] ?? 10;
        //查询搜索条件
        $data = array_filter($data);
        $map = [];
        isset($data['channel_name']) && $map [] = ['channel_name', 'like', '%' . $data['channel_name'] . '%'];
        $list = $this->model->where($map)->order('id desc')->paginate(['list_rows' => $limit, 'page' => $page]);
        return $this->success($list);
    }

    public function add()
    {
        //过滤数据
        $postField = 'channel_name,app_id,app_key,pay_channel,gateway,channel_tag,status,mid,pay_user_tag,show_sort,mini_amount,max_amount,max_number,day_start_time,day_end_time,ontime_is_open_or_close';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $startTime = new \DateTime($post['day_start_time']);
        $endTime = new \DateTime($post['day_end_time']);
        if ($endTime < $startTime) {
            return $this->failed('不支持跨天设置，结束时间要大于开始时间');
        }
        $save = $this->model->save($post);
        if ($save) {
            return $this->success([]);
        }
        return $this->failed('新增失败');
    }

    public function edit()
    {
        //过滤数据
        $postField = 'channel_name,app_id,app_key,mid,pay_channel,gateway,channel_tag,status,pay_user_tag,show_sort,mini_amount,max_amount,max_number,day_start_time,day_end_time,id,ontime_is_open_or_close';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(validates::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $startTime = new \DateTime($post['day_start_time']);
        $endTime = new \DateTime($post['day_end_time']);
        if ($endTime < $startTime) {
            return $this->failed('不支持跨天设置，结束时间要大于开始时间');
        }
        //执行修改数据
        $save = $this->model->update($post);
        if ($save) {
            return $this->success([]);
        }
        return $this->failed('修改失败');
    }

    public function del()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $del = $this->model->where('id', $post['id'])->delete();
        if ($del) {
            return $this->success([]);
        }
        return $this->failed('删除失败');
    }

    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $detail = $this->model->where('id', $post['id'])->find();
        if ($detail) {
            return $this->success($detail);
        }
        return $this->failed('查询失败');
    }
}