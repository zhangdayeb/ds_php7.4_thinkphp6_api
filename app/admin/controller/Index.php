<?php

namespace app\admin\controller;


use app\common\model\AdminLog;
use app\common\model\AdminModel;
use app\common\model\AdminModel as models;
use app\common\traites\PublicCrudTrait;
use app\validate\Admin;
use DateTime;
use think\exception\ValidateException;
use think\facade\Db;
use app\common\model\HomeToken;
use app\common\model\OrderModel;

class Index extends Base
{
    protected $model;
    use PublicCrudTrait;
    /**
     * 后台用户控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function getALLStatistics()
    {

        // 获取当前日期和昨日日期
        $today = date('Y-m-d');
        $yesterday = date('Y-m-d', strtotime('-1 day'));

        // 查询总访问量
        $totalVisits = HomeToken::count();

        // 查询总订单数
        $totalOrders = OrderModel::count();

        // 查询总收入
        $totalRevenue = OrderModel::where('pay_status', 1)->sum('pay_price');

        // 查询今日收入
        $todayRevenue = OrderModel::where('pay_status', 1)
            ->whereDay('create_time', $today)
            ->sum('pay_price');

        // 查询昨日收入
        $yesterdayRevenue = OrderModel::where('pay_status', 1)
            ->whereDay('create_time', $yesterday)
            ->sum('pay_price');
        // 今日暗扣
        $todayAnKou = OrderModel::where('pay_status', 1)->where('status', 504)->whereDay('create_time', $today)->sum('pay_price');

        // 查询今日访问量
        $todayVisits = HomeToken::whereDay('create_time', $today)->count();

        // 查询昨日访问量
        $yesterdayVisits = HomeToken::whereDay('create_time', $yesterday)->count();

        // 查询今日总订单数
        $todayTotalOrders = OrderModel::whereDay('create_time', $today)->count();

        // 查询今日成交订单数
        $todayPaidOrders = OrderModel::where('pay_status', 1)
            ->whereDay('create_time', $today)
            ->count();

        // 查询今日未支付订单数
        $todayUnpaidOrders = OrderModel::where('pay_status', 0)
            ->whereDay('create_time', $today)
            ->count();
            
        // 获取每日访问量
        $dailyVisits = HomeToken::field("DATE_FORMAT(create_time, '%Y-%m-%d') as date, COUNT(*) as visits")
            ->group("DATE_FORMAT(create_time, '%Y-%m-%d')")
            ->select();
        // 获取每周访问量
        $weeklyVisits = HomeToken::field("YEARWEEK(DATE_FORMAT(create_time, '%Y-%m-%d')) as week, COUNT(*) as visits")
            ->group("YEARWEEK(DATE_FORMAT(create_time, '%Y-%m-%d'))")
            ->select();
            
        // 获取每月访问量
        $monthlyVisits = HomeToken::field("DATE_FORMAT(create_time, '%Y-%m') as month, COUNT(*) as visits")
            ->group("DATE_FORMAT(create_time, '%Y-%m')")
            ->select();
            
         // 获取每日收入
        $dailyRevenue = OrderModel::where('pay_status', 1)
            ->field("DATE_FORMAT(create_time, '%Y-%m-%d') as date, SUM(pay_price) as revenue")
            ->group("DATE_FORMAT(create_time, '%Y-%m-%d')")
            ->select();

        // 获取每周收入
        $weeklyRevenue = OrderModel::where('pay_status', 1)
            ->field("YEARWEEK(DATE_FORMAT(create_time, '%Y-%m-%d')) as week, SUM(pay_price) as revenue")
            ->group("YEARWEEK(DATE_FORMAT(create_time, '%Y-%m-%d'))")
            ->select();

        // 获取每月收入
        $monthlyRevenue = OrderModel::where('pay_status', 1)
            ->field("DATE_FORMAT(create_time, '%Y-%m') as month, SUM(pay_price) as revenue")
            ->group("DATE_FORMAT(create_time, '%Y-%m')")
            ->select();
         // 合并数据

        $dailyVisits = $this->actionDailyVisits($dailyVisits->toArray());
        $dailyRevenue = $this->actionDailyRevenue($dailyRevenue->toArray());
        $dailyData = $this->mergeData($dailyVisits, $dailyRevenue, 'date');

        $weeklyVisits = $this->actionWeeklyVisits($weeklyVisits->toArray());
        $weeklyRevenue = $this->actionWeeklyRevenue($weeklyRevenue->toArray());
        $weeklyData = $this->mergeData($weeklyVisits, $weeklyRevenue, 'week');

        $monthlyVisits = $this->actionMonthlyVisits($monthlyVisits->toArray());
        $monthlyRevenue = $this->actionMonthlyRevenue($monthlyRevenue->toArray());
        $monthlyData = $this->mergeData($monthlyVisits, $monthlyRevenue, 'month');
        // 获取代理人收益前20名
        $agents = AdminModel::where('role', 2)->field('id as agent_id,total_money as commission,user_name')->order(['total_money' => 'desc', 'id' => 'asc'])->limit(20)->select();
    
        // 返回结果
        $statistics = [
            'total_visits' => $totalVisits,
            'total_orders' => $totalOrders,
            'total_revenue' => $totalRevenue,
            'yesterday_revenue' => $yesterdayRevenue,
            'today_visits' => $todayVisits,
            'today_revenue' => $todayRevenue,
            'yesterday_visits' => $yesterdayVisits,
            'today_total_orders' => $todayTotalOrders,
            'today_paid_orders' => $todayPaidOrders,
            'today_unpaid_orders' => $todayUnpaidOrders,
            'todayTotalDeductionAmount' => $todayAnKou,
            'dailyData' => $dailyData,
            'weeklyData' => $weeklyData,
            'monthlyData' => $monthlyData,
            'agents' => $agents,
        ];
        return $this->success($statistics);
    }
    
    // 辅助函数
    private function mergeData($visits, $revenue, $dateKey) {
        $merged = [];
        $visitMap = [];
        $revenueMap = [];
        
        foreach ($visits as $visit) {
            $visitMap[$visit[$dateKey]] = $visit['visits'];
        }
        
        foreach ($revenue as $rev) {
            $revenueMap[$rev[$dateKey]] = $rev['revenue'];
        }
        
        $allKeys = array_unique(array_merge(array_keys($visitMap), array_keys($revenueMap)));
        
        foreach ($allKeys as $key) {
            $merged[] = [
                'date' => $key,
                'visits' => isset($visitMap[$key]) ? $visitMap[$key] : 0,
                'revenue' => isset($revenueMap[$key]) ? $revenueMap[$key] : 0
            ];
        }
        
        return $merged;
    }
    
    //获取列表信息
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post= array_filter($this->request->post());
        $map=[];
        isset($post['user_name']) && $map [] = ['a.user_name', 'like', '%' . $post['user_name'] . '%'];
        isset($post['role']) && $map [] = ['role','=',$post['role']];
        isset($post['market_level']) && $map [] = ['a.market_level','=',$post['market_level']];

        $list = $this->model->page_list($map,$limit, $page);
        return $this->success($list);
    }

    public function add()
    {
        //过滤数据
        $postField = 'pid,user_name,pwd,role,market_level,remarks,invitation_code';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $post['invitation_code'] = substr(uniqid(),-8);
        //验证数据

        //验证数据
        try {
            validate(Admin::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //验证成功，查询是否存在该用户
        $user = $this->model->where('user_name', $post['user_name'])->find();
        if ($user) return $this->failed('该用户以存在');
        //加密密码
        $post['pwd'] = !empty($post['pwd']) && isset($post['pwd']) ? pwdEncryption($post['pwd']) : pwdEncryption(admin_Initial_pwd());
        $post['google_code'] =generateCode(32,40); // 谷歌验证器
        //插入数据库
        !isset($post['pid']) && $post['pid'] = 0;
        !isset($post['market_level']) && $post['market_level'] = 0;
//        $post['withdrawal_rate'] = getSystemConfig('apply_service_charge');

        $info = getSystemConfig('reward_allocation');
        if ($info) {
            $arr = json_decode($info, true);

            $post['price_single_low'] = empty($arr['price_single']) ? 0 : $arr['price_single'];
            $post['price_single_high'] = empty($arr['price_single_max']) ? 0 : $arr['price_single_max'];
            $post['free_time'] = empty($arr['free_time']) ? 0 : $arr['free_time'];
            $post['price_hour'] = empty($arr['price_hour']) ? 0 : $arr['price_hour'];
            $post['price_day'] = empty($arr['price_day']) ? 0 : $arr['price_day'];
            $post['price_week'] = empty($arr['price_week']) ? 0 : $arr['price_week'];
            $post['price_month'] = empty($arr['price_month']) ? 0 : $arr['price_month'];
            $post['price_quarter'] = empty($arr['price_quarter']) ? 0 : $arr['price_quarter'];
            $post['price_year'] = empty($arr['price_year']) ? 0 : $arr['price_year'];
            $post['price_forever'] = empty($arr['price_forever']) ? 0 : $arr['price_forever'];
        }

        $save = false;
        Db::startTrans();
        try {
            //写入角色 并
            $post['skin_id'] = getSystemConfig('skin_default_id');
            $this->model->save($post);
            // 市场部门层级关系
            // $this->market(intval($this->model->id), intval($post['pid']),intval($post['market_level']));
            // 更新当前用户的 防封推广链接 
            $agent_uid = $this->model->id;
            addOneAgentLink($agent_uid,$post['invitation_code']);
            $save = true;
            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    //写入到 common_market_relation 数据
    public function market(int $userId, int $pid,int $level)
    {
        if ($userId <= 0) return false;
        $db = Db::name('common_market_relation');
        if ($pid >= 1) {
            //查询到当前用户的父级
            $find = $db->where('aid', $pid)->find();
            //获取用户父级信息 插入到数据
            $db->insert(['aid' => $userId, 'a_level' => $level, 'pid' => $find['aid'], 'p_level' => $find['a_level'], 'path' => $find['path'] . ',' . $userId]);
            return true;
        }
        // 新增当前数据
        $db->insert(['aid' => $userId, 'a_level' => $level, 'pid' => 0, 'p_level' => 0, 'path' => $userId]);
        return true;
    }

    /**
     * 获取用户信息
     * @return mixed
     */
    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(Admin::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //查询用户数据
        $user = $this->model->find($post['id']);
        if ($user) return $this->success($user);
        return $this->failed('用户不存在');
    }

    /**
     * 获取用户信息(代理)
     * @return mixed
     */
    public function agent_detail()
    {
        $id = session('admin_user.id');
        //查询用户数据
        $user = $this->model->find($id);
        if ($user) {
            //联系客服链接
            $user ['service_url'] = getSystemConfig('contact_customer_service');
            return $this->success($user);
        }
        return $this->failed('用户不存在');
    }

    /**
     * 修改方法
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,user_name,pwd,role,market_level,remarks,pid';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(Admin::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //查询是否重复的用户名
        $find = $this->model->where('user_name', $post['user_name'])->where('id', '<>', $post['id'])->find();
        if ($find) return $this->failed('用户已存在');
        !empty($post['pwd']) && $post['pwd'] = pwdEncryption($post['pwd']);
        !isset($post['pid']) && $post['pid'] = 0;
        $post=array_filter($post);
        //执行修改数据
        $save = $this->model->update($post);

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * 修改方法
     * @return mixed
     */
    public function agent_edit()
    {
        //过滤数据
        $postField = 'price_single_low,price_single_high,price_hour,price_day,price_week,price_month,price_quarter,price_year,price_forever';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        
        //验证数据
        try {
            validate(Admin::class)->scene('agent_edit')->check($post);
        } catch (ValidateException $e) {
            return $this->failed($e->getError());
        }

        //代理商配置信息验证
        $video_single_price_low = floatval(getSystemConfig('video_single_price_low'));
        $video_single_price_high = floatval(getSystemConfig('video_single_price_high'));

        if ($video_single_price_low > $post['price_single_low'] || $video_single_price_high < $post['price_single_high']) return $this->failed('代理商可以设置单片价价格范围为:'.$video_single_price_low.'-'.$video_single_price_high);

        $video_day_price_low = floatval(getSystemConfig('video_day_price_low'));
        $video_day_price_high = floatval(getSystemConfig('video_day_price_high'));

        if ($video_day_price_low > $post['price_day'] || $video_day_price_high < $post['price_day']) return $this->failed('代理商可以设置包天价格范围为:'.$video_day_price_low.'-'.$video_day_price_high);

        $video_month_price_low = floatval(getSystemConfig('video_month_price_low'));
        $video_month_price_high = floatval(getSystemConfig('video_month_price_high'));

        if ($video_month_price_low > $post['price_month'] || $video_month_price_high < $post['price_month']) return $this->failed('代理商可以设置包月价格范围为:'.$video_month_price_low.'-'.$video_month_price_high);

        $video_vip_price_low = floatval(getSystemConfig('video_vip_price_low'));
        $video_vip_price_high = floatval(getSystemConfig('video_vip_price_high'));

        if ($video_vip_price_low > $post['price_forever'] || $video_vip_price_high < $post['price_forever']) return $this->failed('代理商可以设置终身会员价格范围为:'.$video_vip_price_low.'-'.$video_vip_price_high);

        $post['id'] = session('admin_user.id');
        $save = $this->model->update($post);

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * 修改密码和提现密码
     * @return mixed|null
     */
    public function editPassword()
    {
        $pwd = $this->request->post('pwd', '');
        $withdrawPwd = $this->request->post('withdraw_pwd', '');
        $id = session('admin_user.id');
        if ($pwd == '' && $withdrawPwd == '') {
            return $this->failed('请输入要修改的密码!');
        }
        $adminUser = $this->model->field('id,pwd,withdraw_pwd')->find($id);
        $ip = $this->request->ip();
        $system = $this->request->header('OS');
        $browser = $this->request->header('User-Agent');
        if ($pwd) {
            $encryptionPwd = pwdEncryption($pwd);
            if ($encryptionPwd == $adminUser->pwd) {
                return $this->failed('密码未更改！');
            }
            Db::startTrans();
            try {
                $adminUser->pwd = $encryptionPwd;
                $adminUser->save();
                // 记录日志
                $log = [
                    'admin_uid' => $id,
                    'create_time' => date('Y-m-d H:i:s'),
                    'mark' => '修改密码 pwd',
                    'ip' => $ip,
                    'system' => $system,
                    'browser' => $browser,
                    'action' => 'editPassword'
                ];
                (new AdminLog())->save($log);
                Db::commit();
            } catch (\Exception $exception) {
                Db::rollback();
                return $this->failed('修改失败！');
            }
        }
        if ($withdrawPwd) {
            try {
                if ($withdrawPwd == $adminUser->withdraw_pwd) {
                    return $this->failed('提现密码未更改！');
                }
                $adminUser->withdraw_pwd = $withdrawPwd;
                $adminUser->save();
                // 记录日志
                $log = [
                    'admin_uid' => $id,
                    'create_time' => date('Y-m-d H:i:s'),
                    'mark' => '修改提现密码 withdraw_pwd',
                    'ip' => $ip,
                    'system' => $system,
                    'browser' => $browser,
                    'action' => 'editPassword'
                ];
                (new AdminLog())->save($log);
                Db::commit();
            } catch (\Exception $exception) {
                Db::rollback();
                return $this->failed('修改失败！');
            }
        }
        return $this->success([], 1, '修改成功！');
    }

    /**
     * 密码修改情况
     * @return mixed
     */
    public function getPasswordEditStatus()
    {
        $id = session('admin_user.id');
        $adminUser = $this->model->field('id,pwd,withdraw_pwd')->find($id);
        return $this->success($adminUser, 1, '请求成功！');
    }



    private function actionDailyVisits($dailyVisits = [])
    {
        $dates = $this->getDailyDate();
        $resDailyVisits = [];
        $dailySource = [];
        foreach ($dailyVisits as $visit) {
            $dailySource[$visit['date']] = $visit['visits'];
        }
        foreach($dates as $key => $date) {
            $resDailyVisits[$key]['date'] = $date;
            $resDailyVisits[$key]['visits'] = $dailySource[$date] ?? 0;
        }
        return $resDailyVisits;
    }

    private function actionDailyRevenue($dailyRevenue = [])
    {
        $dates = $this->getDailyDate();
        $resDailyRevenue = [];
        $dailySource = [];
        foreach ($dailyRevenue as $revenue) {
            $dailySource[$revenue['date']] = $revenue['revenue'];
        }
        foreach($dates as $key => $date) {
            $resDailyRevenue[$key]['date'] = $date;
            $resDailyRevenue[$key]['revenue'] = $dailySource[$date] ?? 0;
        }
        return $resDailyRevenue;
    }

    private function actionWeeklyVisits($weeklyVisits)
    {
        $weeks = $this->getWeekNum();
        $resWeeklyVisits = [];
        $weeklySource = [];
        foreach ($weeklyVisits as $visit) {
            $weeklySource[$visit['week']] = $visit['visits'];
        }
        foreach($weeks as $key => $week) {
            $resWeeklyVisits[$key]['week'] = $week;
            $resWeeklyVisits[$key]['visits'] = $weeklySource[$week] ?? 0;
        }
        return $resWeeklyVisits;
    }

    private function actionWeeklyRevenue($weeklyRevenue)
    {
        $weeks = $this->getWeekNum();
        $resWeeklyRevenue = [];
        $weeklySource = [];
        foreach ($weeklyRevenue as $revenue) {
            $weeklySource[$revenue['week']] = $revenue['revenue'];
        }
        foreach($weeks as $key => $week) {
            $resWeeklyRevenue[$key]['week'] = $week;
            $resWeeklyRevenue[$key]['revenue'] = $weeklySource[$week] ?? 0;
        }
        return $resWeeklyRevenue;
    }

    private function actionMonthlyVisits($monthlyVisits)
    {
        $months = $this->getMonthNum();
        $resMonthlyVisits = [];
        $monthlySource = [];
        foreach ($monthlyVisits as $visit) {
            $monthlySource[$visit['month']] = $visit['visits'];
        }
        foreach ($months as $key => $month) {
            $resMonthlyVisits[$key]['month'] = $month;
            $resMonthlyVisits[$key]['visits'] = $month['visits'] ?? 0;
        }
        return $resMonthlyVisits;
    }

    private function actionMonthlyRevenue($monthlyRevenue)
    {
        $months = $this->getMonthNum();
        $resMonthlyRevenue = [];
        $monthlySource = [];
        foreach ($monthlyRevenue as $revenue) {
            $monthlySource[$revenue['month']] = $revenue['revenue'];
        }
        foreach ($months as $key => $month) {
            $resMonthlyRevenue[$key]['month'] = $month;
            $resMonthlyRevenue[$key]['revenue'] = $monthlySource[$month] ?? 0;
        }
        return $resMonthlyRevenue;
    }

    private function getDailyDate()
    {
        $dates = [];
        $now = time();
        $today = date('Y-m-d');
        for ($i = 6; $i > 0; $i--) {
            $dates[] = date('Y-m-d', strtotime("-$i day", $now));
        }
        $dates[] = $today;
        return $dates;
    }

    private function getWeekNum()
    {
        $weeks = [];
        $today = new DateTime(); // 获取今天的日期
        $currentWeek = (int)$today->format('W'); // 当前周的周编号
        $currentYear = (int)$today->format('o'); // 当前周的年份（ISO 8601）

        // 计算四周内的周编号
        for ($i = 0; $i < 4; $i++) {
            $weekNumber = $currentWeek - $i;
            $year = $currentYear;

            // 如果周编号小于1，则需要回溯到上一年
            if ($weekNumber < 1) {
                $year--;
                $weekNumber += 52; // 假设最多有52周
            }

            $weeks[] = $year . str_pad($weekNumber, 2, '0', STR_PAD_LEFT); // 格式化周编号
        }

        return array_reverse($weeks); // 最近的一周放在数组的末尾
    }

    private function getMonthNum()
    {
        $months = [];
        $today = new DateTime(); // 获取今天的日期
        $currentMonth = (int)$today->format('m'); // 当前月的月份
        $currentYear = (int)$today->format('Y'); // 当前月的年份

        // 计算最近六个月的月份
        for ($i = 0; $i < 6; $i++) {
            $month = $currentMonth - $i;
            $year = $currentYear;

            // 如果月份小于1，则需要回溯到上一年
            if ($month < 1) {
                $year--;
                $month += 12;
            }

            $months[] = $year . '-' . str_pad($month, 2, '0', STR_PAD_LEFT); // 格式化月份
        }

        return array_reverse($months); // 最近的一个月放在数组的末尾
    }
}