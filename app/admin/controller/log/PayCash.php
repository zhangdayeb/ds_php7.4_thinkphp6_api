<?php


namespace app\admin\controller\log;


use app\admin\controller\Base;


use app\common\model\AdminModel;
use app\common\model\PayCash as models;
use app\common\traites\PublicCrudTrait;
use app\validate\Status;
use my\Random;
use think\facade\Db;
use think\exception\ValidateException;
use \app\validate\PayCash as validates;

class PayCash extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 提现控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = $this->request->post();
        $map=[];
        isset($post['user_name']) && $map [] = ['d.user_name', 'like', '%' . $post['user_name'] . '%'];
        (isset($post['status']) && $post['status'] >= 0) && $map [] = ['a.status', '=',$post['status']];

        $list = $this->model->page_list($map,$limit, $page);
        return $this->success($list);
    }

    /**
     * 提现成功状态修改
     */
    public function updatePayStatus()
    {
        // 0 => '申请中', 1 => '已付款', 2 => '拒绝付款',

        // 特别注意 如果 当前状态是 已经拒绝了 不能再次拒绝

        //过滤数据
        $postField = 'id,status,msg';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        try {
            validate(Status::class)->scene('status')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //if ($post['status'] >= 1) return $this->failed('只能修改为成功拒绝状态');
        //查询当前提现，状态是提现成功不能修改为拒绝
        $find = $this->model->find($post['id']);
        Db::startTrans();
        try {
            if ($find->status == 1) {
                return $this->failed('已付款不能修改');
            }
            $save = $this->model->setStatus($post);
            if ($post['status'] == 1) {
                // 扣减用户余额  | 亲爱的小程序员啊 申请的时候 钱就扣掉了 
            }
            if ($post['status'] == 2) {
                // 如果拒绝了
                $adminModel = new AdminModel();
                $user = $adminModel->find($find->agent_uid);
                $adminModel->where('id', $user->id)->inc('money', $find->money)->update();

                //写操作日志
                (new \app\common\model\MoneyLog())->insert([
                    'create_time' => date('Y-m-d H:i:s'),
                    'type' => 3,
                    'status' => 101,
                    'money_before' => $user->money,
                    'money_end' => $find->money + $user->money,
                    'money' => $find->money,
                    'uid' => $user->id,
                    'market_uid' => session('admin_user.id'),
                ]);
            }
            Db::commit();
        } catch (\Exception $exception) {
            Db::rollback();
            return $this->failed($exception->getMessage() . '=====' . $exception->getFile() . '=====' . $exception->getLine());
        }
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * 申请提现列表（代理）
     * @return mixed
     */
    public function apply()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = $this->request->post();
        $map=[];
        $map[] = ['a.agent_uid', '=', session('admin_user.id')];
        (isset($post['user_name']) && !empty($post['user_name'])) && $map[] = ['b.user_name', 'like', '%' . $post['user_name'] . '%'];
        (isset($post['status']) && $post['status'] >= 0) && $map[] = ['a.status', '=', $post['status']];

        $list = $this->model->page_list($map,$limit, $page);
        return $this->success($list);
    }

    /**
     * 申请提现（代理）
     * @return mixed|void
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function apply_add()
    {
        //过滤数据
        $postField = 'money,withdraw_pwd,pay_type,u_bank_name,u_back_card,u_back_user_name,img_url,remark';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        // 获取代理ID
        $agent_uid = session('admin_user.id');
        // 获取当前代理信息
        $res = (new AdminModel())->where(['id' => $agent_uid])->find();
        // 验证提现密码
        if (empty($res) || $res['withdraw_pwd'] != $post['withdraw_pwd']) return $this->failed('提现密码不正确');
        // 清理提现密码提交数据
        unset($post['withdraw_pwd']);
        // 获取系统配置
        $withdraw_limit_low = floatval(getSystemConfig('withdraw_limit_low'));
        $withdraw_limit_high = floatval(getSystemConfig('withdraw_limit_high'));
        $withdraw_day_high = floatval(getSystemConfig('withdraw_day_high'));
        $withdraw_day_times = floatval(getSystemConfig('withdraw_day_times'));
        // 低于最低值
        if ($withdraw_limit_low > $post['money']) return $this->failed('单笔最低提现为：'.$withdraw_limit_low);
        // 高于最大值
        if ($withdraw_limit_high < $post['money']) return $this->failed('单笔最大限额为：'.$withdraw_limit_high);
        // 今日提现总金额
        $todayMoney = $this->model->where('u_id', session('admin_user.id'))
            ->whereDay('create_time', date('Y-m-d'))
            ->sum('money');
        // 不能大于今日总金额
        if ($withdraw_day_high < $todayMoney) return $this->failed('每日限额为：'.$withdraw_day_high);

        // 今日提现总金额
        $todayTimes = $this->model->where('u_id', session('admin_user.id'))
            ->whereDay('create_time', date('Y-m-d'))
            ->count();
        // 不能大于今日总金额
        if ($withdraw_day_times < $todayTimes) return $this->failed('每日次数为：'.$withdraw_day_times);

        // 获取用户钱数 跟 提现手续费
        $adminModel = new AdminModel();
        // 判断余额
        $user_money = $adminModel->where('id', $agent_uid)->value('money');
        if ($user_money - $post['money']  <= 0) return $this->failed('提现金额大于用户金额');


        // 计算手续费 客户说 暂时 不需要 所以设置的值为 0 | 系统的设置的 提现手续费 也是0
        $withdrawRate = $adminModel->where('id', $agent_uid)->value('withdrawal_rate');        
        //提现手续费比例(%)配置
        $apply_service_charge = $withdrawRate ? floatval($withdrawRate/100) : floatval(getSystemConfig('apply_service_charge')/100);

        // 编辑用户数据 

        $tixian_money = round($post['money'],2); 
     
        Db::startTrans();
        try {

            // 提交申请提现记录
            $dataPayCash = [];
            // $dataPayCash['id'] = 'NULL';                                            // ID
            $dataPayCash['sn'] = Random::numeric(19);                           // 随机提现序号
            $dataPayCash['create_time'] = date('Y-m-d H:i:s');              // 申请时间
            // $dataPayCash['success_time'] = 'NULL';                                      // 审核时间
            $dataPayCash['money'] = $tixian_money;       //  提现金额 
            $dataPayCash['money_fee'] = $tixian_money * $apply_service_charge;              //  手续费  这个客户是 0
            $dataPayCash['momey_actual'] = $tixian_money - $apply_service_charge;       //  实际到账金额 = 申请金额 - 手续费 
            $dataPayCash['money_balance'] = $user_money - $tixian_money;    // 用户余额 = 当前余额 - 申请金额
            $dataPayCash['msg'] = '';                                                   // 如果拒绝的 拒绝信息
            $dataPayCash['u_id'] = $agent_uid;    //  代理提现 用户也就是代理自己
            $dataPayCash['u_ip'] = request ()->ip ();   // 客户端IP
            $dataPayCash['u_city'] = 0; //   城市 为空
            $dataPayCash['status'] = 0;// 默认 状态 为1
            $dataPayCash['admin_uid'] = 0;  // 管理员ID
            $dataPayCash['market_uid'] = 0; // 市场部 ID
            $dataPayCash['agent_uid'] = $agent_uid;   // 代理 就是 自己

            $dataPayCash['pay_type'] = isset($post['pay_type'])?$post['pay_type']:'';              // 支付方式  客户自己手写
            $dataPayCash['u_bank_name'] = isset($post['u_bank_name'])?$post['u_bank_name']:'';          // 银行名称
            $dataPayCash['u_back_card'] = isset($post['u_back_card'])?$post['u_back_card']:'';          // 卡号
            $dataPayCash['u_back_user_name'] = isset($post['u_back_user_name'])?$post['u_back_user_name']:'';          // 收款人姓名
            $dataPayCash['img_url'] = isset($post['img_url'])?$post['img_url']:'';          // 收款码图片
            $dataPayCash['remark'] = isset($post['remark'])?$post['remark']:'';          // 客户备注信息

            $this->model->insert($dataPayCash);

            // 修改用户金额 
            $adminModel->where('id', $agent_uid)->save(['money'=>$user_money - $tixian_money]);

            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 2,
                'status' => 201,
                'money_before' => $user_money,
                'money_end' => $user_money - $tixian_money,
                'money' => $tixian_money,
                'uid' => $agent_uid,
                'market_uid' => session('admin_user.id'),
            ]);

            Db::commit();
            return $this->success('操作成功');
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return $this->failed($e->getMessage ());
        }
    }


    /**
     * 申请提现配置
     * @return mixed|void
     */
    public function apply_config() {
        $id = session('admin_user.id');
        $userModel = new AdminModel();
        $user_money = $userModel->where('id', $id)->value('money');
        //查询用户数据
        $user = $userModel->find($id);
        if (!$user) return $this->failed('用户不存在');

        $user['withdraw_limit_low'] = floatval(getSystemConfig('withdraw_limit_low'));
        $user['withdraw_limit_high'] = floatval(getSystemConfig('withdraw_limit_high'));
        $user['withdraw_day_high'] = floatval(getSystemConfig('withdraw_day_high'));
        $user['withdraw_day_times'] = floatval(getSystemConfig('withdraw_day_times'));
        $user['user_money'] = floatval($user_money);

        return $this->success($user);
    }

}