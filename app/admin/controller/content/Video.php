<?php


namespace app\admin\controller\content;

use app\admin\controller\Base;


use app\common\model\SysConfig;
use app\common\model\Video as models;
use app\common\model\VideoTag;
use app\common\model\VideoToVip;
use app\common\service\VideoTempService;
use app\common\traites\PublicCrudTrait;
use think\exception\ValidateException;
use \app\validate\Video as validates;
use think\facade\Db;

class Video extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 视频控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = [];
        isset($post['title']) && $map [] = ['a.title', 'like', '%' . $post['title'] . '%'];

        $list = $this->model->page_list($map, $limit, $page);
        return $this->success($list);
    }

    /**
     * 添加
     */
    public function add()
    {
        //过滤数据
        $postField = 'type,title,des,sort,status,thumb_url,video_url,description,video_price,is_pop,tags,is_best';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(validates::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        $user = $this->model->where('title', $post['title'])->find();
        if ($user) return $this->failed('该标题以存在');

//        isset($post['thumb_url']) && $post['thumb_url'] = image_update($post['thumb_url']);
//        isset($post['video_url']) && $post['video_url'] = image_update($post['video_url']);
        !isset($post['thumb_url']) && $post['thumb_url'] = '';;

        //添加的时候顺便插入到 video_to_vip 表一条空数据
        $save = false;
        Db::startTrans();
        try {
            $this->model->save($post);
            $insertId = $this->model->id;
            (new VideoToVip())->insert(['video_id' => $this->model->id]);
            $save = true;
            if ($post['is_pop'] == 1) {
                $this->model->where('id', '<>', $insertId)->update(['is_pop' => 0]);
            }
            if ($post['tags']) {
                (new VideoTempService())->checkVideoTags($post['tags'], '管理员新增');
            }
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }

        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    /**
     * 修改
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,type,title,thumb_url,des,sort,status,video_url,description,video_price,is_pop,tags,is_best';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //查询是否重复的该菜单
        $find = $this->model->where('title', $post['title'])->where('id', '<>', $post['id'])->find();
        if ($find) return $this->failed('该标题以存在');

//        if (isset($post['thumb_url']) && !empty($post['thumb_url'])) {
//            $post['thumb_url'] = image_update($post['thumb_url']);
//        }
//        if (isset($post['video_url']) && !empty($post['video_url'])) {
//            $post['video_url'] = image_update($post['video_url']);
//        }
//        !isset($post['video_url']) && $post['video_url'] = '';
//        !isset($post['thumb_url']) && $post['thumb_url'] = '';
        if ($post['thumb_url']) {
            $post['thumb_url'] = processFilePath($post['thumb_url']);
        }
        if ($post['video_url']) {
            $post['video_url'] = processFilePath($post['video_url']);
        }

        //执行修改数据
        $save = $this->model->update($post);
        if ($save) {
            if ($post['is_pop'] == 1) {
                $this->model->where('id', '<>', $post['id'])->update(['is_pop' => 0]);
            }
            if ($post['tags']) {
                (new VideoTempService())->checkVideoTags($post['tags'], '管理员新增');
            }
            return $this->success([]);
        }
        return $this->failed('修改失败');
    }

    public function getTagsList()
    {
        $tag = $this->request->post('tag', '');
        $model = new VideoTag();
        $where['status'] = 1;
        if ($tag) {
            $where['name'] = $tag;
        }
        $list = $model->where($where)->field('id,name')->select();
        return $this->success($list);
    }

    public function getRewardAllocation()
    {
        $configName = 'reward_allocation';
        $info = getSystemConfig($configName);
        if ($info) {
            $arr = json_decode($info, true);
            return $this->success($arr);
        }
        return $this->failed('修改失败');
    }

    public function updateRewardAllocation()
    {
        $data = $this->request->post();
        if (empty($data)) {
            return $this->failed('提交数据失败');
        }
        try {
            $this->validate($data,
                [
                    'price_single' => 'require',
                    'price_single_max' => 'require',
                    'price_day' => 'require',
                    'price_week' => 'require',
                    'price_month' => 'require',
                    'price_quarter' => 'require',
                    'price_year' => 'require',
                    'price_forever' => 'require',
                    'price_hour' => 'require',
                    'free_time' => 'require',
                    'index_time' => 'require',
                ], [
                    'price_single.require' => '单片最低金额必填',
                    'price_single_max.require' => '单片最高金额必填',
                    'price_day.require' => '包天金额必填',
                    'price_week.require' => '包周金额必填',
                    'price_month.require' => '包月金额必填',
                    'price_quarter.require' => '包季度金额必填',
                    'price_year.require' => '包年金额必填',
                    'price_forever.require' => '终身会员金额必填',
                    'price_hour.require' => '1小时会员价必填',
                    'free_time.require' => '免费时长必填',
                    'index_time.require' => '首页弹窗必填',
                ]
            );
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        $configName = 'reward_allocation';
        unset($data['token']);
        $confJson = json_encode($data, JSON_UNESCAPED_UNICODE);
        $res = (new SysConfig)->where('name',$configName)->update(['value' => $confJson]);
        if ($res) {
            $arr = json_decode($confJson, true);
            return $this->success($arr);
        }
        return $this->failed('修改失败');
    }

    public function changeBest()
    {
        $id = $this->request->post('id', 0);
        $isBest = $this->request->post('is_best', 0);
        if ($id == 0) {
            return $this->failed('参数错误');
        }
        try {
            $res = $this->model->where('id', $id)->update(['is_best' => $isBest]);
            return $this->success(['update' => $res]);
        } catch (\Exception $e) {
            return $this->failed('修改失败');
        }
    }
}