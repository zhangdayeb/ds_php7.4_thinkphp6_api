<?php

namespace app\home\controller\login;

use app\BaseController;
use app\common\model\AdminModel;
use app\common\model\HomeToken;
use app\common\model\SkinModel;
use app\common\model\UserModel as models;
use app\common\traites\PublicCrudTrait;
use app\validate\home\Login as validates;
use think\exception\ValidateException;
use hg\apidoc\annotation as Apidoc;

/**
 * @Apidoc\Title("用户登录相关")
 * */
class Login extends BaseController
{
    protected $model;
    use PublicCrudTrait;

    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @Apidoc\Title("登陆")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("phone", type="string",require=true, desc="账号")
     * @Apidoc\Param("pwd", type="string",require=true, desc="密码")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function index()
    {
        //过滤数据
        $postField = 'phone,pwd';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('login')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }

        $find = $this->model->where(['user_name|phone' => $post['phone'], 'pwd' => pwdEncryption($post['pwd'])])
            ->with(['vip'])
            ->find();
        if (empty($find))
            return show([], config('ToConfig.http_code.error'), '账号或者密码错误');
        $find = $find->toArray();
        if ($find['status'] != 1)
            return show([], config('ToConfig.http_code.error'), '该用户被禁用');

        $find['token'] = $token = home_api_token($find['id']);

        //查询是否存在这条token的用户
        $update = (new HomeToken())->where('user_id', $find['id'])->update(['token' => $token, 'create_time' => date('Y-m-d H:i:s')]);

        //数据不存在时插入
        if ($update == 0) {
            (new HomeToken)->insert(['token' => $token, 'user_id' => $find['id'], 'create_time' => date('Y-m-d H:i:s')]);
        }

        $find['skininfo'] = $info = SkinModel::hasWhere('getAdminInfo', ['AdminModel.id' => $find['agentid']])
            ->where(['SkinModel.status' => 1])
            ->field(['SkinModel.id', 'SkinModel.title', 'SkinModel.domain', 'SkinModel.remark'])
            ->findOrEmpty();
        if ($info->isEmpty()) {
            $find['skininfo'] = SkinModel::where(['id' => 1])->field(['id', 'title', 'domain', 'remark'])->find();
        }
        //登陆成功后存入 session
        session('home_user', $find);
        (new \app\common\service\LoginLog())->login(2);//登陆日志

        // 更新 统计数据 
        (new AdminModel)->where('id',$find['agentid'])->inc('access_today')->update();
        return show($find);
    }

    /**
     * @Apidoc\Title("注册")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("phone", type="string",require=true, desc="账号")
     * @Apidoc\Param("pwd", type="string",require=true, desc="密码")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function register()
    {
        //过滤数据
        $postField = 'phone,pwd,codes,code';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('register')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        //判断是否存在该账号
        $rand = userkey(rand(10, 20));//生成账号
        $find = $this->model->where('phone', $post['phone'])->whereOr('user_name', $rand)->find();
        if ($find) return show([], config('ToConfig.http_code.error'), '该手机号已存在');
        $avatar = [
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/1bd5a1d898c64f96b44d26860c434a95~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/840a5b3bcc03471c9cdbfaf5eb482936~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/1d57712b1552412dbac609d3fc2beb2e~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/d26474e1d0a94317a7a7d34c175f06d1~tplv-tt-large.image',
        ];
        shuffle($avatar);
        $data = [
            'phone' => $post['phone'],
            'nickname' => '新用户' . rand(1000, 9999),
            'avatar' => $avatar[0],
            'user_name' => $rand,
            'pwd' => pwdEncryption($post['pwd']),
            'create_time' => date('Y-m-d H:i:s'),
            'invitation_code' => generateCode(),
            'type' => 2,
            'withdraw_pwd' => home_tx_pwd(),
        ];

        //推广用户查询 //查询推广代理商
        if (isset($post['codes']) && !empty($post['codes'])) {
            $agent = $this->model->where('invitation_code', $post['codes'])->find();
            if ($agent) {
                $data['agent_id_1'] = $agent->id;
                $data['agent_id_2'] = $agent->agent_id_1;
                $data['agent_id_3'] = $agent->agent_id_2;
                $data['market_uid'] = $agent->market_uid;
            }

        }
        //推广用户查询 //查询推广代理商
        if (isset($post['code']) && !empty($post['code'])) {
            $agentid = AdminModel::where('invitation_code', $post['code'])->value('id');
            if ($agentid) {
                $data['agentid'] = $agentid;
                
                // 更新 统计数据 
                (new AdminModel)->where('id',$agentid)->inc('access_today')->update();
                (new AdminModel)->where('id',$agentid)->inc('open_today')->update();

            }
        }
        //插入数据
        $find = $this->model->save($data);

        if (empty($find)) return show([], config('ToConfig.http_code.error'), '注册失败');
       
        return show();
    }

    public function user_register()
    {
        //过滤数据
        $postField = 'user_name,pwd,codes,code';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('user_register')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        //判断是否存在该账号
//        $rand = userkey(rand(10, 20));//生成账号
        $find = $this->model->where('user_name', $post['user_name'])->find();
        if ($find) return show([], config('ToConfig.http_code.error'), '该用户名已存在');
        $avatar = [
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/1bd5a1d898c64f96b44d26860c434a95~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/840a5b3bcc03471c9cdbfaf5eb482936~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/1d57712b1552412dbac609d3fc2beb2e~tplv-tt-large.image',
            'https://p3.toutiaoimg.com/tos-cn-i-qvj2lq49k0/d26474e1d0a94317a7a7d34c175f06d1~tplv-tt-large.image',
        ];
        shuffle($avatar);
        $data = [
            'nickname' => '注册户' . rand(1000, 9999),
            'avatar' => $avatar[0],
            'user_name' => $post['user_name'],
            'pwd' => pwdEncryption($post['pwd']),
            'create_time' => date('Y-m-d H:i:s'),
            'invitation_code' => generateCode(),
            'type' => 2,
            'withdraw_pwd' => home_tx_pwd(),
        ];

        //推广用户查询 //查询推广代理商
        if (isset($post['codes']) && !empty($post['codes'])) {
            $agent = $this->model->where('invitation_code', $post['codes'])->find();
            if ($agent) {
                $data['agent_id_1'] = $agent->id;
                $data['agent_id_2'] = $agent->agent_id_1;
                $data['agent_id_3'] = $agent->agent_id_2;
                $data['market_uid'] = $agent->market_uid;
            }

        }
        //推广用户查询 //查询推广代理商
        if (isset($post['code']) && !empty($post['code'])) {
            $agentid = AdminModel::where('invitation_code', $post['code'])->value('id');
            // var_dump ($agentid);
            if ($agentid) {
                $data['agentid'] = $agentid;
                // 更新 统计数据 
                (new AdminModel)->where('id',$agentid)->inc('access_today')->update();
                (new AdminModel)->where('id',$agentid)->inc('open_today')->update();

            }
        }
        //插入数据
        $find = $this->model->save($data);

        if (empty($find)) return show([], config('ToConfig.http_code.error'), '注册失败');
        return show();
    }

    /**
     * 废弃
     * @Apidoc\Title("修改密码")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("pwd", type="string",require=true, desc="密码")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function change_pwd()
    {
        //过滤数据
        $postField = 'user_name,pwd,phone';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('edit_pwd')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        $save = [
            'pwd' => pwdEncryption($post['pwd']),
            'user_name' => $post['user_name'],
            'phone' => $post['phone'],
        ];
//        var_dump(session('home_user'));exit;
        //插入数据 查询手机号和旧密码是否匹配
        $find = $this->model->where(['id' => session('home_user.id')])->save($save);
        if (empty($find)) return show([], config('ToConfig.http_code.error'), '修改密码失败');
        return show();
    }

    /**
     * @Apidoc\Title("忘记密码")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("phone", type="string",require=true, desc="账号")
     * @Apidoc\Param("pwd", type="string",require=true, desc="密码")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function forget()
    {
        //过滤数据
        $postField = 'phone,pwd';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(validates::class)->scene('forget')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }

        //判断输入账号是否正确
        if ($post['phone'] != session('home_user.phone'))
            return show([], config('ToConfig.http_code.error'), '输入账号和登陆的不匹配');
        //插入数据
        $find = $this->model->where(['phone' => $post['phone']])->save(['pwd' => pwdEncryption($post['pwd'])]);
        if (empty($find)) return show([], config('ToConfig.http_code.error'), '修改密码失败');
        return show();
    }

    /**
     * 废弃
     * @Apidoc\Title("退出登录")
     * @Apidoc\Method("GET")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function sign_out()
    {
        session('home_user', '');
        return show();
    }
}