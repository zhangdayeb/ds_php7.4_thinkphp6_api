<?php

namespace app\home\controller\user;

use app\common\model\HomeToken;
use app\common\model\SkinModel;
use app\common\model\UserModel;
use app\common\model\UserModel as models;
use app\common\model\Video;
use app\common\model\VideoBuyUserVideo;
use app\common\model\VideoToVip;
use app\common\model\VideoUserLevel;
use app\common\traites\PublicCrudTrait;
use hg\apidoc\annotation as Apidoc;
use app\home\controller\Base;
use think\facade\Db;

/**
 * @Apidoc\Title("个人中心")
 * */
class User extends Base
{
    protected $model;
    use PublicCrudTrait;

    /**
     * 个人中心
     */
    public function initialize()
    {
        //判断不存在时直接 return出去
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @Apidoc\Title("个人信息")
     * @Apidoc\Method("GET")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function index()
    {
        // 修改统计逻辑
        $home_user= session('home_user');
        $buy_video_count = 0;
        $buy_taocan_count = 0;
        $userId = $home_user['id'];
        $buy_video_count = (new VideoBuyUserVideo())->where(['uid'=>$userId])->count();
        $buy_taocan_count = (new VideoUserLevel())->where(['uid'=>$userId])->count();
        $home_user['buycount'] = $buy_video_count + $buy_taocan_count;

        // 替换显示的头像
        $home_user['avatar'] = config('ToConfig.app_update.image_url') .'/head.png';

       if (empty($home_user)) return show([],config('ToConfig.http_code.error'),'用户信息不存在，请登录');
       
       return show($home_user);
    }

    /**
     * @Apidoc\Title("获取配置")
     * @Apidoc\Method("POST")
     * @Apidoc\Param("name", type="string",require=true, desc="配置名称")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function get_config()
    {
        $name = $this->request->param('name','');
        return show(get_config($name));
    }

    /**
     * @Apidoc\Title("退出登录")
     * @Apidoc\Method("GET")
     * @Apidoc\Returned("data", type="bool", desc="返回成功失败结果")
     */
    public function sign_out()
    {
        $session = session('home_user');
        $token = $session['token'];
        // 清除数据库 token
        HomeToken::where('token', $token)->delete();
        session('home_user', null);
        return show();
    }

    public function syn_order()
    {
        // 当前用户
        $home_user = session('home_user');
        $userId = $home_user['id'];

        // 临时用户ID
        $tempUserId = $this->request->post('temp_user_id', '');
        if ($tempUserId == '') {
            return show();
        }
        
        //临时用户信息
        $tempUserInfo = UserModel::where('id', $tempUserId)->find();
        if (empty($tempUserInfo)) {
            return show();
        }
        
        Db::startTrans();
        try {
            if ($userId > $tempUserId) {
                $sysUserInfo = [
                    'vip_grade' => $tempUserInfo['vip_grade'],
                    'money_balance' => $tempUserInfo['money_balance'],
                    'money_freeze' => $tempUserInfo['money_freeze'],
                    'money_total_recharge' => $tempUserInfo['money_total_recharge'],
                    'money_total_withdraw' => $tempUserInfo['money_total_withdraw'],
                    'money_total_agent' => $tempUserInfo['money_total_agent'],
                    'market_uid' => $tempUserInfo['market_uid'],
                    'agent_id_1' => $tempUserInfo['agent_id_1'],
                    'agent_id_2' => $tempUserInfo['agent_id_2'],
                    'agent_id_3' => $tempUserInfo['agent_id_3'],
                    'agent_id' => $tempUserInfo['agent_id'],
                    'agent_rate' => $tempUserInfo['agent_rate'],
                    'agentid' => $tempUserInfo['agentid'],
                ];
            } else {
                $sysUserInfo = [
                    'agent_id' => $tempUserInfo['agent_id'],
                    'agentid' => $tempUserInfo['agentid'],
                ];
            }
            UserModel::where('id', $userId)->update($sysUserInfo);
            // 获取临时用户的单独商品权限：：ntp_video_buy_user_video
            $tempUserVideos = VideoBuyUserVideo::where('uid', $tempUserId)->select();
            // 获取临时用户的套餐权限：ntp_video_user_level
            $tempUserLevel = VideoUserLevel::where('uid', $tempUserId)->select();
            if (!empty($tempUserVideos)) {
                foreach ($tempUserVideos as $video) {
                    // 当前用户是否已存在这个单独商品权限
                    $isExist = VideoBuyUserVideo::where('uid', $userId)->where('video_id', $video['video_id'])->find();
                    if (!$isExist) {
                        VideoBuyUserVideo::create([
                            'uid' => $userId,
                            'video_id' => $video['video_id'],
                            'agent_uid' => $video['agent_uid'],
                            'buy_price' => $video['buy_price'],
                            'start_time' => $video['start_time'],
                            'end_time' => $video['end_time'],
                            'status' => $video['status'],
                            'remark' => '临时用户：' . $tempUserId . '购买单片转移',
                        ]);
                    }
                }
            }
            if (!empty($tempUserLevel)) {
                foreach ($tempUserLevel as $level) {
                    // 当前用户是否已存在这个套餐权限
                    $isExistLevel = VideoUserLevel::where('uid', $userId)->where('vip_level', $level['vip_level'])->find();
                    if (!$isExistLevel) {
                        VideoUserLevel::create([
                            'uid' => $userId,
                            'market_uid' => $level['vip_level'],
                            'admin_uid' => $level['admin_uid'],
                            'status' => $level['status'],
                            'order_id' => $level['order_id'],
                            'vip_level' => $level['vip_level'],
                            'package_type' => $level['package_type'],
                            'vip_start_time' => $level['vip_start_time'],
                            'vip_end_time' => $level['vip_end_time'],
                            'update_time' => date('Y-m-d H:i:s'),
                            'create_time' => $level['create_time'],
                            'remark' => '临时用户：' . $tempUserId . '购买单片转移',
                        ]);
                    }
                }
            }
            Db::commit();
        } catch (\Throwable $exception) {
            Db::rollback();
            return show([], config('ToConfig.http_code.error'), '转移失败:' . $exception->getMessage() . $exception->getLine());
        }

        return show(['formal_user_id' => $userId, 'temp_user_id' => $tempUserId], config('ToConfig.http_code.success'), '转移成功');
    }


    public function already_purchased()
    {
        $home_user = session('home_user');
        $uid = $home_user['id'];

        // 首先判断是否 临时用户 还是 正式用 
        $userInfo = (new UserModel)->find($uid)->toArray();
        $user_name = $userInfo['user_name'];
        $user_nickname = $userInfo['nickname'];
        $f1 = strpos($user_name,'ser');
        $f2 = strpos($user_nickname,'用户');

        if($f1 == 1 && $f2 == 3){
            // 是否购买过单片
            $hasVideo = VideoBuyUserVideo::where('uid', $uid)->column('video_id');
            // 是否购买过套餐
            $hasUserLevel = VideoUserLevel::where('uid', $uid)->column('vip_level');
            $hasPurchased = $hasVideo || $hasUserLevel;
            $result = [
                'has_purchased' => $hasPurchased,
                'has_video' => $hasVideo,
                'has_user_level' => $hasUserLevel,
            ];
        }else{
            $result = [
                'has_purchased' => false,
                'has_video' => 0,
                'has_user_level' => 0,
            ];
        }
        return show($result, config('ToConfig.http_code.success'), '请求成功');
    }
}